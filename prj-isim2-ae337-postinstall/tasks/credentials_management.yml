- name: Block create temp credentials
  block:
    - name: Generate temp keepass file name
      set_fact:
        post_install_keepass_database_temp_file_name: "{{ '{}_keepassDB.kdbx'.format(ansible_date_time.iso8601_basic) }}"
      run_once: true
      delegate_to: localhost

    - name: Setting path to temp keepass file name
      set_fact:
        post_install_keepass_database_temp_file_path: "/tmp/AE337/{{ post_install_keepass_database_temp_file_name }}"
      run_once: true
      delegate_to: localhost

    - name: Retrieve Keepass database locally
      get_url:
        url: "{{ keepass_database_url }}"
        dest: "{{ post_install_keepass_database_temp_file_path }}"
      run_once: yes
      delegate_to: localhost

    - name: Get entry on keepass temp database on localhost
      keepass:
        keepass_database: "{{ post_install_keepass_database_temp_file_path }}"
        keepass_password: "{{ keepass_database_password }}"
        entry_title: "{{ post_install_keepass_unix_entry_title }}"
        entry_username: "{{ post_install_keepass_unix_entry_username }}"
        entry_group: "{{ post_install_keepass_unix_entry_group }}"
        entry_group_recursive: true
        search_regex: true
        search_flags: i
      run_once: yes
      delegate_to: localhost
      register: keepass_return
      vars:
        ansible_python_interpreter: /usr/bin/python3 -E

    - block:
        - name: Create temp machine credentials
          uri:
            url: "{{ tower_url }}/api/v2/credentials/"
            user: "{{ tower_username }}"
            password: "{{ tower_password }}"
            force_basic_auth: yes
            method: POST
            body_format: json
            return_content : yes
            status_code: [201]
            body: '{ "name": "CRD-{{ post_install_hostname|lower }}-TEMP", "organization": 2, "credential_type": 1, "inputs": {"username": "{{ post_install_keepass_unix_entry_username }}", "password": "{{ keepass_return.password }}", "become_method": "sudo", "become_password": "{{ keepass_return.password }}"} }'
          register: post_install_temp_credentials
          run_once: yes
          delegate_to: localhost

        - name: debug post_install_temp_credentials
          debug:
            var: post_install_temp_credentials

        - name: Set fact credentials id
          set_fact:
            post_install_temp_credentials_id: "{{ post_install_temp_credentials.json.id }}"
          run_once: true
          delegate_to: localhost

      when: post_install_network_area is not search('newcloud')

    - block:
        - name: Create temp machine credentials (newcloud)
          uri:
            url: "{{ tower_url }}/api/v2/credentials/"
            user: "{{ tower_username }}"
            password: "{{ tower_password }}"
            force_basic_auth: yes
            method: POST
            body_format: json
            return_content : yes
            status_code: [201]
            body: '{ "name": "CRD-{{ post_install_hostname|lower }}-TEMP", "organization": 2, "credential_type": 30, "inputs": {"ansible_user_newcloud": "{{ post_install_keepass_unix_entry_username }}", "ansible_password_newcloud": "{{ keepass_return.password }}"} }'
          register: post_install_temp_credentials
          run_once: yes
          delegate_to: localhost

        - name: Set fact credentials id
          set_fact:
            post_install_temp_credentials_id: "{{ post_install_temp_credentials.json.id }}"
          run_once: true
          delegate_to: localhost

      when: post_install_network_area is search('newcloud')

    - name: Delete temp keepass file
      file:
        path: "/tmp/AE337/{{ post_install_keepass_database_temp_file_name }}"
        state: absent
      delegate_to: localhost
      run_once: yes
  
  when: post_install_temp_credentials_action == "create"


- name: Block delete temp credentials
  block:
    - name: Delete temp machine credentials
      uri:
        url: "{{ tower_url }}/api/v2/credentials/{{ post_install_temp_credentials_id }}/"
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        method: DELETE
        return_content : yes
        status_code: [204]
      run_once: yes
      delegate_to: localhost
  
  when: post_install_temp_credentials_action == "delete"